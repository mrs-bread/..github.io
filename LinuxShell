#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <sys/wait.h>

using namespace std;

struct CommandHistory {
    vector<string> history;
    void saveHistory(const string& filename);
    void loadHistory(const string& filename);
};

CommandHistory history;

void handle_sighup(int sig) {
    cout << "Configuration reloaded" << endl;
}

bool is_bootable(const string& device) {
    int fd = open(device.c_str(), O_RDONLY);
    if (fd == -1) {
        perror("open");
        return false;
    }

    char buffer[512];
    ssize_t bytes_read = read(fd, buffer, 512);
    close(fd);

    if (bytes_read != 512) {
        cerr << "Error reading first sector." << endl;
        return false;
    }

    return (buffer[510] == 0x55 && buffer[511] == 0xAA);
}

bool command_exists(const string& command) {
    return access(command.c_str(), X_OK) == 0; //Проверяем права на исполнение
}

void execute_command(const string& command) {
    if (!command_exists(command)) {
        cerr << "Command not found: " << command << endl;
        return;
    }
    pid_t pid = fork();
    if (pid == 0) {
        char *args[] = {const_cast<char*>(command.c_str()), nullptr};
        execvp(args[0], args);
        perror("execvp failed");
        exit(1);
    } else if (pid > 0) {
        wait(nullptr);
    } else {
        perror("fork failed");
    }
}

void handle_echo(stringstream& ss) {
    string arg;
    while (ss >> arg) {
        cout << arg << " ";
    }
    cout << endl;
}

void handle_env(stringstream& ss) {
    string var_name;
    ss >> var_name;
    if (var_name.empty()) {
        cerr << "Error: Variable name not specified." << endl;
    } else {
        char* env_var = getenv(var_name.c_str() + 1);
        if (env_var) {
            cout << env_var << endl;
        } else {
            cout << "Variable not found." << endl;
        }
    }
}

void handle_list_device(stringstream& ss){
    string device;
    ss >> device;
    if (device.empty()) {
        cerr << "Error: Device not specified." << endl;
    } else {
        if (is_bootable(device)) {
            cout << device << " is bootable." << endl;
        } else {
            cout << device << " is not bootable." << endl;
        }
    }
}


void CommandHistory::saveHistory(const string& filename) {
    ofstream file(filename);
    if (file.is_open()) {
        for (const auto& command : this->history) {
            file << command << endl;
        }
        file.close();
    } else {
        cerr << "Error opening history file for saving." << endl;
    }
}

void CommandHistory::loadHistory(const string& filename) {
    ifstream file(filename);
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            this->history.push_back(line);
        }
        file.close();
    }
}

int main() {
    signal(SIGHUP, handle_sighup);
    history.loadHistory(".shell_history");

    string line;
    while (getline(cin, line)) {
        history.history.push_back(line);
        stringstream ss(line);
        string command;
        ss >> command;

        if (command == "exit" || command == "\\q") break;
        else if (command == "echo") handle_echo(ss);
        else if (command == "\\e") handle_env(ss);
        else if (command == "\\l") handle_list_device(ss);
        else execute_command(command);

        cout << endl;
    }
    history.saveHistory(".shell_history");
    return 0;
}

